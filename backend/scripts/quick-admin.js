#!/usr/bin/env node

const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m',
};

function log(message, color = colors.reset) {
  console.log(`${color}${message}${colors.reset}`);
}

async function makeAdmin(email) {
  try {
    // –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
    const user = await prisma.user.findUnique({
      where: { email },
      include: {
        userRoles: true,
      }
    });

    if (!user) {
      log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email "${email}" –Ω–µ –Ω–∞–π–¥–µ–Ω`, colors.red);
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ä–æ–ª—å ADMIN
    const hasAdminRole = user.userRoles.some(role => role.role === 'ADMIN');
    
    if (hasAdminRole) {
      log(`‚ÑπÔ∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${email} —É–∂–µ –∏–º–µ–µ—Ç —Ä–æ–ª—å ADMIN`, colors.yellow);
      return true;
    }

    // –ù–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª—å ADMIN
    const adminRole = await prisma.userRole.create({
      data: {
        userId: user.id,
        role: 'ADMIN',
        assignedBy: 'quick-admin-script',
      }
    });

    log(`üéâ –†–æ–ª—å ADMIN —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${email}`, colors.green);
    log(`üìã ID —Ä–æ–ª–∏: ${adminRole.id}`, colors.blue);
    log(`‚è∞ –ù–∞–∑–Ω–∞—á–µ–Ω–∞: ${adminRole.assignedAt.toLocaleString()}`, colors.reset);

    return true;

  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`, colors.red);
    return false;
  }
}

async function listAdmins() {
  try {
    const admins = await prisma.user.findMany({
      where: {
        userRoles: {
          some: {
            role: 'ADMIN'
          }
        }
      },
      include: {
        userRoles: {
          where: {
            role: 'ADMIN'
          }
        }
      }
    });

    if (admins.length === 0) {
      log('üì≠ –í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤', colors.yellow);
    } else {
      log(`üë®‚Äçüíª –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≤ —Å–∏—Å—Ç–µ–º–µ (${admins.length}):`, colors.cyan);
      log('‚îÄ'.repeat(60), colors.blue);
      
      admins.forEach((admin, index) => {
        const adminRole = admin.userRoles[0];
        log(`${index + 1}. ${admin.email}`, colors.green);
        log(`   –ò–º—è: ${admin.name || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}`, colors.reset);
        log(`   –ù–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–æ–º: ${adminRole.assignedAt.toLocaleString()}`, colors.reset);
        log('');
      });
    }
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: ${error.message}`, colors.red);
  }
}

async function main() {
  try {
    const args = process.argv.slice(2);
    
    log('üõ°Ô∏è  –ë—ã—Å—Ç—Ä–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ NeSXt', colors.bright);
    log('‚ïê'.repeat(50), colors.blue);

    // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –∞—Ä–≥—É–º–µ–Ω—Ç --list –∏–ª–∏ -l, –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
    if (args.includes('--list') || args.includes('-l')) {
      await listAdmins();
      return;
    }

    // –ï—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω email, –ø–æ–∫–∞–∑–∞—Ç—å help
    if (args.length === 0) {
      log('\nüìñ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:', colors.cyan);
      log('  node scripts/quick-admin.js <email>', colors.reset);
      log('  node scripts/quick-admin.js --list  # –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤', colors.reset);
      log('\nüìù –ü—Ä–∏–º–µ—Ä—ã:', colors.cyan);
      log('  node scripts/quick-admin.js user@example.com', colors.reset);
      log('  node scripts/quick-admin.js --list', colors.reset);
      return;
    }

    const email = args[0];

    log(`\nüîç –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–∏ ADMIN –¥–ª—è: ${email}`, colors.yellow);
    
    const success = await makeAdmin(email);
    
    if (success) {
      log('\nüìä –¢–µ–∫—É—â–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:', colors.cyan);
      await listAdmins();
    }

  } catch (error) {
    log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, colors.red);
    console.error(error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
main().catch(console.error); 