#!/usr/bin/env node

const { PrismaClient } = require('@prisma/client');
const readline = require('readline');

const prisma = new PrismaClient();

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
};

function log(message, color = colors.reset) {
  console.log(`${color}${message}${colors.reset}`);
}

function createInterface() {
  return readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });
}

function question(rl, text) {
  return new Promise((resolve) => {
    rl.question(text, resolve);
  });
}

async function findUser(identifier) {
  // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ email
  let user = await prisma.user.findUnique({
    where: { email: identifier },
    include: {
      userRoles: true,
      accounts: {
        select: {
          provider: true,
          createdAt: true,
        }
      }
    }
  });

  // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ email, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ ID
  if (!user) {
    try {
      user = await prisma.user.findUnique({
        where: { id: identifier },
        include: {
          userRoles: true,
          accounts: {
            select: {
              provider: true,
              createdAt: true,
            }
          }
        }
      });
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ–∏—Å–∫–∞ –ø–æ ID
    }
  }

  return user;
}

async function assignAdminRole(userId) {
  try {
    // –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ä–æ–ª—å ADMIN
    const existingAdminRole = await prisma.userRole.findFirst({
      where: {
        userId: userId,
        role: 'ADMIN'
      }
    });

    if (existingAdminRole) {
      return { alreadyExists: true };
    }

    // –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª—å ADMIN
    const adminRole = await prisma.userRole.create({
      data: {
        userId: userId,
        role: 'ADMIN',
        assignedBy: 'system-script',
      }
    });

    return { success: true, role: adminRole };
  } catch (error) {
    return { error: error.message };
  }
}

async function listAllUsers() {
  const users = await prisma.user.findMany({
    include: {
      userRoles: true,
      accounts: {
        select: {
          provider: true,
        }
      },
      _count: {
        select: {
          tokens: true,
        }
      }
    },
    orderBy: {
      createdAt: 'desc'
    },
    take: 10
  });

  if (users.length === 0) {
    log('\nüì≠ –í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.', colors.yellow);
    return;
  }

  log('\nüë• –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', colors.cyan);
  log('‚îÄ'.repeat(80), colors.blue);

  users.forEach((user, index) => {
    const roles = user.userRoles.map(r => r.role).join(', ') || '–Ω–µ—Ç —Ä–æ–ª–µ–π';
    const providers = user.accounts.map(a => a.provider).join(', ') || '–Ω–µ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤';
    const isAdmin = user.userRoles.some(r => r.role === 'ADMIN');
    
    log(`${index + 1}. ${user.email}`, isAdmin ? colors.red : colors.reset);
    log(`   ID: ${user.id}`, colors.blue);
    log(`   –ò–º—è: ${user.name || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}`, colors.reset);
    log(`   –†–æ–ª–∏: ${roles}`, isAdmin ? colors.red : colors.yellow);
    log(`   –ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã: ${providers}`, colors.magenta);
    log(`   –¢–æ–∫–µ–Ω–æ–≤: ${user._count.tokens}`, colors.green);
    log(`   –°–æ–∑–¥–∞–Ω: ${user.createdAt.toLocaleString()}`, colors.reset);
    log('');
  });
}

async function main() {
  try {
    log('üõ°Ô∏è  –°–∫—Ä–∏–ø—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ NeSXt', colors.bright);
    log('‚ïê'.repeat(50), colors.blue);

    const rl = createInterface();

    // –ü–æ–∫–∞–∑–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await listAllUsers();

    // –°–ø—Ä–æ—Å–∏—Ç—å, –∫–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–æ–º
    const identifier = await question(rl, '\nüîç –í–≤–µ–¥–∏—Ç–µ email –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–º: ');

    if (!identifier.trim()) {
      log('‚ùå –ù–µ —É–∫–∞–∑–∞–Ω email –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', colors.red);
      rl.close();
      return;
    }

    log('\nüîé –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...', colors.yellow);

    // –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await findUser(identifier.trim());

    if (!user) {
      log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email/ID "${identifier}" –Ω–µ –Ω–∞–π–¥–µ–Ω`, colors.red);
      rl.close();
      return;
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    log('\n‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', colors.green);
    log(`üìß Email: ${user.email}`, colors.reset);
    log(`üÜî ID: ${user.id}`, colors.blue);
    log(`üë§ –ò–º—è: ${user.name || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}`, colors.reset);
    log(`üìÖ –°–æ–∑–¥–∞–Ω: ${user.createdAt.toLocaleString()}`, colors.reset);

    const currentRoles = user.userRoles.map(r => r.role);
    if (currentRoles.length > 0) {
      log(`üé≠ –¢–µ–∫—É—â–∏–µ —Ä–æ–ª–∏: ${currentRoles.join(', ')}`, currentRoles.includes('ADMIN') ? colors.red : colors.yellow);
    } else {
      log('üé≠ –¢–µ–∫—É—â–∏–µ —Ä–æ–ª–∏: –Ω–µ—Ç —Ä–æ–ª–µ–π', colors.yellow);
    }

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    const confirm = await question(rl, '\n‚ùì –ù–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª—å ADMIN —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é? (y/N): ');

    if (confirm.toLowerCase() !== 'y' && confirm.toLowerCase() !== 'yes') {
      log('‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞', colors.yellow);
      rl.close();
      return;
    }

    log('\n‚ö° –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–∏ ADMIN...', colors.yellow);

    // –ù–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª—å
    const result = await assignAdminRole(user.id);

    if (result.alreadyExists) {
      log('‚ÑπÔ∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–º–µ–µ—Ç —Ä–æ–ª—å ADMIN', colors.yellow);
    } else if (result.success) {
      log('üéâ –†–æ–ª—å ADMIN —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞!', colors.green);
      log(`üìã ID —Ä–æ–ª–∏: ${result.role.id}`, colors.blue);
      log(`‚è∞ –ù–∞–∑–Ω–∞—á–µ–Ω–∞: ${result.role.assignedAt.toLocaleString()}`, colors.reset);
    } else {
      log(`‚ùå –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–∏: ${result.error}`, colors.red);
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    const updatedUser = await findUser(identifier.trim());
    const updatedRoles = updatedUser.userRoles.map(r => r.role);
    
    log('\nüìä –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:', colors.cyan);
    log(`üé≠ –†–æ–ª–∏: ${updatedRoles.join(', ')}`, colors.green);

    rl.close();

  } catch (error) {
    log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, colors.red);
    console.error(error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
main().catch(console.error); 